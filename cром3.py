# -*- coding: utf-8 -*-
"""Cром3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yyqn6a4pAJ9UJHlUSDYBZBSIE3s7mn3w
"""

import numpy as num
from array import *
m=431
p= array('I',[])

p.append(int(1))
p.append(int(1))
p.append(int(0))
p.append(int(1))
p.append(int(0))
p.append(int(1))
for i in range(0,425):
   p.append(int(0))
p.append(int(1))
print (len(p))

def Ginput():
  A = input()
  GArray= array('I',[])
  for i in range(0,len(A)):
    GArray.append(int(A[len(A)-i-1]))
  return GArray

def Goutput(LongArray):
  X=str()
  l=len(LongArray)
  for i in range(0,l):
    X=X+str(LongArray[l-i-1])
  print(X)

def G0():
    X= array('I',[])
    for i in range(0,m):
      X.append(0)
    return X

def G1():
    X= array('I',[1])
    for i in range(0,m-1):
      X.append(0)
    return X

def GAdd(A,B):
  LongEqual(A,B)
  l=len(A)
  LongArray= array('I',[])
  for i in range(0,l):
    temp= A[i]+B[i]
    LongArray.append(num.mod(temp,2))
  return LongArray

def LongShiftbeatstohigh (A, b):
    Temp= array('I',[])
    for i in range (0, len(A)):
      Temp.append(A[i])
    for i in range(0,b):
      Temp.insert(0,0)
    return Temp

def LongCmp(A,B):
  Temp1=short0(A)
  Temp2=short0(B)
  if len(Temp1)<len(Temp2):
    return -1
  else:
    return 1

def GMOD (A, B):
  B=short0(B)
  lb=len(B)
  R=A
  while LongCmp(R,B)>=0:
    B=short0(B)
    R=short0(R)
    lr=len(R)
    C=LongShiftbeatstohigh(B,lr-lb)
    if LongCmp(R,C)<0:
      lr=lr-1
      B=short0(B)
      C=LongShiftbeatstohigh(B,lr-lb)
    R=GAdd(R,C)
  R=short0(R)
  if(len(R)==432):
    R=GAdd(R,C)
  return R

def short0 (A):
  la=len(A)
  for i in range(0,la):
    if A[la-i-1]==0:
      A.pop(la-i-1)
    else :
      return A

def GMull(A,B):
  LongArray= array('I',[])
  for i in range(0,len(A)):
    if (A[i]==1):
      LongArray=GAdd(LongArray,LongShiftbeatstohigh(B,i))
  LongArray=GMOD(LongArray,p)
  return short0(LongArray)

def GSqare(A):
    LongArray= array('I',[])
    for i in range (0, len(A)):
      LongArray.append(A[i])
      LongArray.append(0)
    LongArray.pop(len(LongArray)-1)
    LongArray=GMOD(LongArray,p)

    return short0(LongArray)

def GPower(A,b):
  short0(A)
  temp=b
  temp=short0(temp)
  lb=len(temp)
  LongArray= G1()
  for i in range(0, lb):
    if temp[lb-i-1]==1:
      LongArray=GSqare(LongArray)
      LongArray=GMull(LongArray,A)
    else :
      LongArray=GSqare(LongArray)
  return short0(LongArray)

def Long2To10(A):
  X=str()
  A=short0(A)
  la=len(A)
  temp=0
  for i in range(0,la):
    temp=temp+A[i]*(2**i)
  for i in range(0,len(str(temp))):
    X=X+str((int(str(temp)[len(str(temp))-i-1], base=10)))
 return X

def Long10To2(A):
    LongArray= array('I',[])
    X=bin(int(A))
    for i in range(0,len(X)-2):
      LongArray.append(int(X[len(X)-1-i]))
    return LongArray

def GObern(A):
  Temp=(2**m)-2
  Temp=Long10To2(Temp)
  return(GPower(A,Temp))

def GTrace(A):
  LongArray=array('I',[])
  temp=A
  for i in range(0,m):
    LongArray=GAdd(LongArray,temp)
    temp=GSqare(temp)
F  return LongArray

def LongEqual(A,B):
  la=len(A)
  lb=len(B)
  if la<lb :
    for i in range(la+1,lb+1):
      A.append(0)
  if lb<la :
    for i in range(lb+1,la+1):
      B.append(0)    
  return A,B

import time
import random
A=array('I',[])
for i in range(0,431):
  A.append(random.randint(0,1))
B=array('I',[])
for i in range(0,431):
  B.append(random.randint(0,1))


start_time=time.time()
Goutput(GPower(A,B))
print("--- %s seconds ---" % (time.time()-start_time))

Goutput(A)
Goutput(B)