# -*- coding: utf-8 -*-
"""CROM_Long1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hLRdyyoAeGznmWx4Y27aGLGle2uTBV1U

2.1 представлення числа за основою В
"""

import numpy as num
from array import *
w=16
B=2**w
n =int (2048/w)
print(n)

def Linput():
  A = input()
  LongArray= array('I',[])
  for i in range(0,len(A)):
    LongArray.append(int(A[len(A)-i-1], base=16))
  return LongArray

def Loutput(LongArray):
  X=str()
  l=len(LongArray)
  for i in range(0,l):
    if LongArray[l-i-1]<10:
      X=X+str(LongArray[l-i-1])
    if LongArray[l-i-1]==10:
      X=X+str('A')
    if LongArray[l-i-1]==11:
      X=X+str('B')
    if LongArray[l-i-1]==12:
      X=X+str('C')
    if LongArray[l-i-1]==13:
      X=X+str('D')  
    if LongArray[l-i-1]==14:
      X=X+str('E')  
    if LongArray[l-i-1]==15:
      X=X+str('F')
  print(X)

def LongEqual(A,B):
  la=len(A)
  lb=len(B)
  if la<lb :
    for i in range(la+1,lb+1):
      A.append(0)
  if lb<la :
    for i in range(lb+1,la+1):
      B.append(0)    
  return A,B

def LongAdd(A,B):
  LongEqual(A,B)
  l=len(A)
  carry =0
  LongArray= array('I',[])
  for i in range(0,l):
    temp= A[i]+B[i]+carry
    c=num.mod(temp, 2**w)
    LongArray.append(num.mod(c,w))
    carry= int(temp//w)
  if carry==1:
    LongArray.append(1)
  return LongArray

def LongAdd2(A,B):
  LongEqual(A,B)
  l=len(A)
  LongArray= array('I',[])
  for i in range(0,l):
    temp= A[i]+B[i]
    LongArray.append(temp)
  return LongArray

def LongCmp(A,B):
  Temp1=A
  Temp2=B
  LongEqual(Temp1,Temp2)
  la=len(Temp1)-1
  while A[la]== B[la]:
    la=la-1
    if la==-1:
      return 0
  else:
    if Temp1[la]>Temp2[la]:
      return 1
    else:
       return -1
  return r

def LongSub (A,B):
  LongEqual(A,B)
  n=len(A)
  LongArray= array('I',[])
  borrow =0
  for i in range(0,n):
      temp=A[i]-B[i]-borrow
      if temp>=0:
         LongArray.append(temp)
         borrow=0
      else:
         LongArray.append(w+temp)
         borrow=1
  return LongArray

def LongSub_Module (A,B):
  LongEqual(A,B)
  r=LongCmp(A,B)
  n=len(A)
  if r==-1:
    C=A
    A=B
    B=C
    r=1
  if r==0:
    return array('I',[0])
  if r==1:
    LongArray= array('I',[])
    borrow =0
    for i in range(0,n):
        temp=A[i]-B[i]-borrow
        if temp>=0:
          LongArray.append(temp)
          borrow=0
        else:
          LongArray.append(w+temp)
          borrow=1
    return LongArray

def LongMulOneDight(A,b):
  carry=0
  n=len(A)
  LongArray= array('I',[])
  for i in range (0,n):
    temp= A[i]*b+carry
    LongArray.append(num.mod(temp,w))
    carry=int(temp//w)
  LongArray.append(carry)
  return LongArray

def LongMulOneDight2(A,b):
  n=len(A)
  LongArray= array('I',[])
  for i in range (0,n):
    temp= A[i]*b
    LongArray.append(temp)
  return LongArray

def LongMull(A,B):
  LongEqual(A,B)
  la=len(A)
  LongArray= array('I',[])
  for i in range(0,la):
    temp=LongMulOneDight(A,B[i])
    for ii in range(0,i):
      temp.insert(0,0)
    LongArray=LongAdd(LongArray, temp)
    short0(LongArray)
  return LongArray

def LongSqare(A):
  la=len(A)
  LongArray= array('I',[])
  temp1= array('I',[])
  for i in range(0,la):
    temp0=LongMulOneDight2(A,A[0])
    for ii in range(0,i):
      temp1.insert(len(temp1),0)
    for ii in range(1,la-i):
      temp1.append(temp0[ii])
    for ii in range(0,i):
      temp0.insert(0,temp1[i-1+(((i-1)-ii)*(la-1))])
    for ii in range(0,i):
      temp0.insert(0,0)
    LongArray=LongAdd2(LongArray,temp0)
    A.pop(0)
    temp0=[]
    
  carry=0
  LongArray2= array('I',[])
  for i in range (0,len(LongArray)):
    temp= LongArray[i]+carry
    LongArray2.append(num.mod(temp,w))
    carry=int(temp//w)

  LongArray2.append(carry)
  short0(LongArray2)
  return LongArray2

def To2(A):
  A=int(A)
  LongArray= array('I',[])
  for i in range (0,4):
    LongArray.append(A%2)
    A=A//2
  return LongArray

def short0 (A):
  la=len(A)
  for i in range(0,la):
    if A[la-i-1]==0:
      A.pop(la-i-1)
    else :
      return A

def KillLastDigits(A, b):
  TempA= array('I',[])
  for i in range (0, len(A)):
     TempA.append(A[i])
  la=len(TempA)
  if la<=b:
    for i in range(0,la):
      TempA.pop(la-i-1)
    return TempA
  else:
    for i in range(0,b):
      TempA.pop(la-i-1)
    return TempA

def LongTo2(A):
  A2=array('I',[])
  la=len(A)
  for i in range(0,la):
    temp=To2(A[i])
    for ii in range(0, 4):
      A2.append(temp[ii])
  return A2

def LongTo10(A):
  A10=array('I',[])
  A2=LongTo2(A)
  la=len(A2)
  temp=0
  for i in range(0,la):
    temp=temp+A2[i]*(2**i)
  for i in range(0,len(str(temp))):
    A10.append(int(str(temp)[len(str(temp))-i-1], base=10))
  return A10

def LongPower(A,B):
  B=LongTo2(B)
  short0(B)
  lb=len(B)
  LongArray= array('I',[1])
  for i in range(0, lb):
    if B[lb-i-1]==1:
      LongArray=LongSqare(LongArray)
      LongArray=LongMull(LongArray,A)
    if B[lb-i-1]!=1:
      LongArray=LongSqare(LongArray)
  return LongArray

def LongShiftbeatstohigh (A, b):
    Temp= array('I',[])
    for i in range (0, len(A)):
      Temp.append(A[i])
    for i in range(0,b):
      Temp.insert(0,0)
    return Temp

def Long2To16(A):
  A16=array('I',[])
  while len(A) % 4 !=0:
    A.append(0)
  for i in range (0, len(A), 4):
    if A[i]==0:
      if A[i+1]==0:
        if A[i+2]==0:
          if A[i+3]==0:
            A16.append(0)
          else:
             A16.append(8)
        else:
          if A[i+3]==0:
            A16.append(4)
          else:
            A16.append(12)
      else:
        if A[i+2]==0:
          if A[i+3]==0:
            A16.append(2)
          else:
             A16.append(10)
        else:
          if A[i+3]==0:
            A16.append(6)
          else:
            A16.append(14)      
    else:
      if A[i+1]==0:
        if A[i+2]==0:
          if A[i+3]==0:
            A16.append(1)
          else:
             A16.append(9)
        else:
          if A[i+3]==0:
            A16.append(5)
          else:
            A16.append(13)
      else:
        if A[i+2]==0:
          if A[i+3]==0:
            A16.append(3)
          else:
             A16.append(11)
        else:
          if A[i+3]==0:
            A16.append(7)
          else:
            A16.append(15)     
  return A16

def LongSub2(A,B):
  LongEqual(A,B)
  n=len(A)
  LongArray= array('I',[])
  borrow =0
  for i in range(0,n):
      temp=A[i]-B[i]-borrow
      if temp>=0:
         LongArray.append(temp)
         borrow=0
      else:
         LongArray.append(2+temp)
         borrow=1
  return LongArray

def LongDivModQ(A,B):
  LongArray= array('I',[])
  A=LongTo2(A)
  B=LongTo2(B)
  B=short0(B)
  lb=len(B)
  R=A
  Q=0
  while LongCmp(R,B)>=0:
    B=short0(B)
    R=short0(R)
    lr=len(R)
    C=LongShiftbeatstohigh(B,lr-lb)
    if LongCmp(R,C)<0:
      lr=lr-1
      B=short0(B)
      C=LongShiftbeatstohigh(B,lr-lb)
    R=LongSub2(R,C)
    Q=(Q+(2**(lr-lb)))
  for i in range(0,len(str(Q))):
    LongArray.append(int(str(Q)[len(str(Q))-i-1], base=16))
  LongArray=Long10To16(LongArray)
  return LongArray

def LongDivModR(A,B):
  A=LongTo2(A)
  B=LongTo2(B)
  B=short0(B)
  lb=len(B)
  R=A
  while LongCmp(R,B)>=0:
    B=short0(B)
    R=short0(R)
    lr=len(R)
    C=LongShiftbeatstohigh(B,lr-lb)
    if LongCmp(R,C)<0:
      lr=lr-1
      B=short0(B)
      C=LongShiftbeatstohigh(B,lr-lb)
    R=LongSub2(R,C)
  R=Long2To16(R)
  return R

def Long10To16(A):
    LongArray= array('I',[])
    X=str()
    for i in range(0,len(A)):
      X=X+str(A[len(A)-i-1])
    X=hex(int(X))
    for i in range(0,len(X)-2):
      LongArray.append(int(X[len(X)-1-i], base=16))
    return LongArray

def LongMod(A,n):
  LongArray= array('I',[])
  TempA= array('I',[])
  for i in range (0, len(A)):
     TempA.append(A[i])
  B= array('I',[0,1])
  la=len(TempA)
  laA=Long10To16(str(la))
  U=LongDivModQ(LongPower(B,laA), n)
  q=KillLastDigits(TempA,len(n)-1)
  q=LongMull(q,U)
  q=KillLastDigits(TempA,len(n)+1)
  LongArray= LongSub(TempA,LongMull(q,n))
  while (LongCmp(LongArray,n))!=-1:
    LongArray=LongSub(LongArray, n)
  return short0(LongArray)

def LongEvklid(A,B):
  D= array('I',[0])
  if LongCmp(A,B)==-1:
    Temp0=B
    Temp1=A
  else:
    Temp0=A
    Temp1=B
  while(LongCmp(Temp1,D)==1):
    Temp2=Temp0
    Temp0=Temp1
    Temp1=LongDivModR(Temp2,Temp1)
  return short0(Temp0)

def LongNOK(A, B):
  NOK= array('I',[0])
  NOK=LongDivModQ(LongMull(A,B), LongEvklid(A,B))
  return NOK

def LongSubMod (A,B,n):
  LongArray=array('I',[0])
  if LongCmp(A,B)==-1:
    LongArray=LongSub(B,A)
    LongArray=LongSub(n, LongDivModR(LongArray,n))
  else:
    LongArray=LongSub(A,B)
    LongArray=LongDivModR(LongArray,n)
  return LongArray

def LongAddMod (A,B,n):
  LongArray=array('I',[0])
  LongArray=LongAdd(A,B)
  LongArray=LongDivModR(LongArray,n)
  return LongArray

def LongMullMod (A,B,n):
  LongArray=array('I',[0])
  LongArray=LongMull(A,B)
  LongArray=LongDivModR(LongArray,n)
  return LongArray

def LongSqareMod (A,n):
  LongArray=array('I',[0])
  LongArray=LongSqare(A)
  LongArray=LongDivModR(LongArray,n)
  return LongArray

def LongPowerMod (A,B,n):
  TempA=A
  TempB=B
  if LongCmp(B,n)!=-1:
    TempB=LongDivModR(B,n)
  TempB=LongTo2(TempB)
  if LongCmp(A,n)!=-1:
    TempA=LongDivModR(A,n)
  short0(TempB)
  lb=len(TempB)
  LongArray= array('I',[1])
  for i in range(0, lb):
    if TempB[lb-i-1]==1:
      LongArray=LongSqareMod(LongArray,n)
      LongArray=LongMullMod(LongArray,A,n)
    if TempB[lb-i-1]!=1:
      LongArray=LongSqareMod(LongArray,n)
  short0(LongArray)
  return LongArray

import time
import random
A=array('I',[])
for i in range(0,1024):
  A.append(random.randint(0,15))
B=array('I',[])
for i in range(0,1024):
  B.append(random.randint(0,15))
N=array('I',[])
for i in range(0,512):
  N.append(random.randint(0,15))


Loutput(A)
Loutput(B)
Loutput(N)



start_time=time.time()
C=LongAddMod(A,B,N)
Loutput(C)
print("--- %s seconds ---" % (time.time()-start_time))


start_time=time.time()
C=LongSubMod(A,B,N)
Loutput(C)
print("--- %s seconds ---" % (time.time()-start_time))


start_time=time.time()
C=LongMullMod(A,B,N)
Loutput(C)
print("--- %s seconds ---" % (time.time()-start_time))


start_time=time.time()
C=LongSqareMod(A,N)
Loutput(C)
print("--- %s seconds ---" % (time.time()-start_time))

start_time=time.time()
C=LongPowerMod(A,B,N)
Loutput(C)
print("--- %s seconds ---" % (time.time()-start_time))

