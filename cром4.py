# -*- coding: utf-8 -*-
"""Cром4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gtwGXOHEdCAqtLHOds2d_aMWHvtlg1at
"""

import numpy as num
from array import *
m=431

def Ginput():
  A = input()
  GArray= array('I',[])
  for i in range(0,len(A)):
    GArray.append(int(A[i]))
  return GArray

def Goutput(LongArray):
  X=str()
  l=len(LongArray)
  for i in range(0,l):
    X=X+str(LongArray[i])
  print(X)

def LongEqual(A,B):
  la=len(A)
  lb=len(B)
  if la<lb :
    for i in range(la+1,lb+1):
      A.append(0)
  if lb<la :
    for i in range(lb+1,la+1):
      B.append(0)

def GAdd(A,B):
  LongEqual(A,B)
  l=len(A)
  LongArray= array('I',[])
  for i in range(0,l):
    temp= A[i]+B[i]
    LongArray.append(num.mod(temp,2))
  return LongArray

def G1():
    X= array('I',[])
    for i in range(0,m):
      X.append(1)
    return X

def G0():
    X= array('I',[])
    for i in range(0,m):
      X.append(0)
    return X

def Shiftbitsleft(A):
    X= array('I',[])
    for i in range(0,len(A)-1):
      X.append(int(A[i+1]))
    X.append(int(A[0]))
    return X

def Matrix(m):
    X= array('I',[])
    for i in range(0, m): 
      for j in range(0, m):
        if (num.mod((2**i)+(2**j),2*m+1)==1) or (num.mod((2**i)-(2**j),2*m+1)==1) or (num.mod(-(2**i)+(2**j),2*m+1)==1) or (num.mod(-(2**i)-(2**j),2*m+1)==1):
          X.append(1)
        else:
          X.append(0)
    return(X)

def GMull (A,B,X):

  z= array('I',[])
  temp01=A
  temp02=B
  for i in range(0, m):
    temp0=[]
    sum=0
    for s in range(0, m):
      for j in range (0, m):
        if temp01[j]==1 and X[s+j*m]==1:
          sum=sum+1
      temp0.append(num.mod(sum,2))
      sum=0
    temp1=[]
    for s in range (0, 1):
      for j in range(0, m):
        if temp0[j]==1 and temp02[j]==1:
          sum=sum+1
      temp1.append(num.mod(sum,2))   
    z.append(temp1[0])
    temp01=Shiftbitsleft(temp01)
    temp02=Shiftbitsleft(temp02)
  return(z)

def GSqare(A):
    X= array('I',[])
    X.append(int(A[len(A)-1]))
    for i in range(0,len(A)-1):
      X.append(int(A[i]))
    return X

def GTrase(A):
  X=int(0)
  for i in range(0,len(A)):
    X=X+A[i]
  X=num.mod(X,2)
  return [X]

def Long2To10(A):
  X=str()
  la=len(A)
  temp=0
  for i in range(0,la):
    temp=temp+A[i]*(2**i)
  for i in range(0,len(str(temp))):
    X=X+str((int(str(temp)[len(str(temp))-i-1], base=10)))
  return X

def Long10To2(A):
    LongArray= array('I',[])
    X=bin(int(A))
    for i in range(0,len(X)-2):
      LongArray.append(int(X[len(X)-1-i]))
    return LongArray

def GPower(A,B):
  X=Matrix(m)
  lb=len(B)
  LongArray= G1()
  LongEqual(LongArray,G0())
  for i in range(0, lb):
    if B[i]==1:
      LongArray=GSqare(LongArray)
      LongArray=GMull(LongArray,A,X)
    else :
      LongArray=GSqare(LongArray)
  return LongArray

def GObern(A):
  Temp=(2**m)-2
  Temp=Long10To2(Temp)
  LongEqual(Temp, G0())
  return(GPower(A,Temp))

def short0 (A):
  la=len(A)
  for i in range(0,la):
    if A[la-i-1]==0:
      A.pop(la-i-1)
    else :
      return A

import time
import random
A=array('I',[])
for i in range(0,431):
  A.append(random.randint(0,1))
B=array('I',[])
for i in range(0,431):
  B.append(random.randint(0,1))
C=array('I',[])
for i in range(0,50):
  C.append(random.randint(0,1))
LongEqual(C,G0())




start_time=time.time()
Goutput(GPower(A,C))
print("--- %s seconds ---" % (time.time()-start_time))

Goutput(A)
Goutput(B)
Goutput(C)